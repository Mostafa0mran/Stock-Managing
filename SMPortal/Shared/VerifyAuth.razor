@page "/verifyauth"
@inject IProductEndpoint Products

<h3>VerifyAuth</h3>

<AuthorizeView Roles="Admin">
    <Authorized>
        <!--Add Html content here-->
        <!-- This content is only visible to users in the Admin role -->
		<p>the user (@context.User.FindFirst(ClaimTypes.Name).Value) is authorized.</p>
        
        @if(isAuthenticated)
		{
			<h4>@userName is authenticated</h4>
			<ul>
				<li>Access to Admin Role: @isAdminUser</li>
				<li>Access to Staff Role: @isStaff</li>
				<li>Access to Manager Role: @isManager</li>
			</ul>
		}
		else
		{
			<h4>The user is not authenticated</h4>
		}
	</Authorized>
	<NotAuthorized>
		<p role="alert">Sorry, you're not authorized to see this.</p>
	</NotAuthorized>
</AuthorizeView>
@code {
	[CascadingParameter]
	public Task<AuthenticationState>AuthStateTask { get; set; }

	private bool isAuthenticated = false;
	private string userName;
	private bool isAdminUser = false;
	private bool isStaff = false;
	private bool isManager = false;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateTask;

		if (authState.User.Identity.IsAuthenticated)
		{
			isAuthenticated = true;

			try
			{
				List<ProductModel> data = await Products.GetAll();

				foreach (var item in data)
				{
					Console.WriteLine(item.Description);
				}
			}
			catch (Exception ex)
			{

				Console.WriteLine(ex.Message);
			}
			
			userName = authState.User.FindFirst(ClaimTypes.Name).Value;

			isAdminUser = authState.User.IsInRole("Admin");
			isStaff = authState.User.IsInRole("Staff");
			isManager = authState.User.IsInRole("Manager");
		}
	}
}
